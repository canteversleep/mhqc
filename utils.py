{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# main script\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "\n",
    "def stream_spans(endpoint, traceid):\n",
    "    \"\"\"\n",
    "    Takes in the Jaeger endpoint and a trace ID, and returns a JSON object with the spans for each ID.\n",
    "    \n",
    "    Args:\n",
    "        endpoint (str): The Jaeger API endpoint.\n",
    "        traceid (str): A string representing a trace ID.\n",
    "    \n",
    "    Returns:\n",
    "        dict: A JSON object containing the spans for the given trace ID.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        # Construct the full URL\n",
    "        url = f\"{endpoint}/api/traces/{traceid}\"\n",
    "        \n",
    "        # Send a GET request to the endpoint\n",
    "        response = requests.get(url)\n",
    "        \n",
    "        # Check if the request was successful\n",
    "        if response.status_code == 200:\n",
    "            # Return the JSON response\n",
    "            return response.json()\n",
    "        else:\n",
    "            # Return an error message if the request was not successful\n",
    "            return {\"error\": f\"Failed to retrieve spans. Status code: {response.status_code}\"}\n",
    "    except requests.RequestException as e:\n",
    "        # Handle any exceptions that occur during the request\n",
    "        return {\"error\": str(e)}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "endpoint = \"http://172.18.0.54:12349\"\n",
    "traceid = \"cc1d6566e5f051a4c11eca0a221fc80f\"\n",
    "jsons = stream_spans(endpoint, traceid)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "# Specify the file path where you want to save the JSON file\n",
    "file_path = './dump.json'\n",
    "\n",
    "# Dump the dictionary into a JSON file\n",
    "with open(file_path, 'w') as f:\n",
    "    json.dump(jsons, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['data', 'total', 'limit', 'offset', 'errors'])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jsons.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'traceID': 'cc1d6566e5f051a4c11eca0a221fc80f',\n",
       " 'rootSpan': {'spanID': '02db9805175490e9',\n",
       "  'operation': 'GetRates start',\n",
       "  'service': 'unknown_service:rate_service_process',\n",
       "  'startTime': 1720953256998024,\n",
       "  'endTime': 1720953257000796,\n",
       "  'duration': 2772,\n",
       "  'error': False,\n",
       "  'children': []}}"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "generate_trace_json(jsons[\"data\"][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Completed processing all traces. Output files are in ./output\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import os\n",
    "import ijson\n",
    "from typing import Dict, List, Any\n",
    "\n",
    "def generate_trace_json(trace: Dict[str, Any]) -> Dict[str, Any]:\n",
    "    \"\"\"\n",
    "    Generate a JSON representation of a single trace.\n",
    "    \n",
    "    :param trace: A dictionary containing trace data\n",
    "    :return: A dictionary representing the trace in the desired JSON format\n",
    "    \"\"\"\n",
    "    def create_span_dict(span: Dict[str, Any]) -> Dict[str, Any]:\n",
    "        return {\n",
    "            \"spanID\": span[\"spanID\"],\n",
    "            \"operation\": span[\"operationName\"],\n",
    "            \"service\": trace[\"processes\"][span[\"processID\"]][\"serviceName\"],\n",
    "            \"startTime\": span[\"startTime\"],\n",
    "            \"endTime\": span[\"startTime\"] + span[\"duration\"],\n",
    "            \"duration\": span[\"duration\"],\n",
    "            \"error\": any(tag[\"key\"] == \"error\" and tag[\"value\"] for tag in span[\"tags\"]),\n",
    "            \"children\": []\n",
    "        }\n",
    "\n",
    "    # Create a dictionary of all spans\n",
    "    spans = {span[\"spanID\"]: create_span_dict(span) for span in trace[\"spans\"]}\n",
    "\n",
    "    # Build the span tree\n",
    "    for span in trace[\"spans\"]:\n",
    "        if \"references\" in span:\n",
    "            for ref in span[\"references\"]:\n",
    "                if ref[\"refType\"] == \"CHILD_OF\":\n",
    "                    parent_span = spans[ref[\"spanID\"]]\n",
    "                    parent_span[\"children\"].append(spans[span[\"spanID\"]])\n",
    "\n",
    "    # Find the root span (the one without a parent)\n",
    "    root_span = next(span for span in spans.values() if not any(span[\"spanID\"] in s[\"children\"] for s in spans.values()))\n",
    "\n",
    "    return {\n",
    "        \"traceID\": trace[\"traceID\"],\n",
    "        \"rootSpan\": root_span\n",
    "    }\n",
    "\n",
    "def process_all_traces(input_file: str, output_dir: str):\n",
    "    \"\"\"\n",
    "    Process all traces from the input file and generate individual JSON files.\n",
    "    \n",
    "    :param input_file: Path to the input file containing all traces\n",
    "    :param output_dir: Directory to store individual trace JSON files\n",
    "    \"\"\"\n",
    "    os.makedirs(output_dir, exist_ok=True)\n",
    "    \n",
    "    with open(input_file, 'rb') as f:\n",
    "        traces = ijson.items(f, 'data.item')\n",
    "        \n",
    "        for i, trace in enumerate(traces):\n",
    "            trace_json = generate_trace_json(trace)\n",
    "            output_file = os.path.join(output_dir, f\"{trace['traceID']}.json\")\n",
    "            \n",
    "            with open(output_file, 'w') as out_f:\n",
    "                json.dump(trace_json, out_f, indent=2)\n",
    "            \n",
    "            if (i + 1) % 100 == 0:\n",
    "                print(f\"\\rProcessed {i + 1} traces\", end=\"\", flush=True)\n",
    "\n",
    "    print(f\"\\nCompleted processing all traces. Output files are in {output_dir}\")\n",
    "\n",
    "# Usage example\n",
    "input_file = file_path\n",
    "output_dir = \"./output\"\n",
    "process_all_traces(input_file, output_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'02db9805175490e9': {'spanID': '02db9805175490e9',\n",
       "  'operation': 'GetRates start',\n",
       "  'service': 'unknown_service:rate_service_process',\n",
       "  'startTime': 1720953256998024,\n",
       "  'endTime': 1720953257000796,\n",
       "  'duration': 2772,\n",
       "  'error': False,\n",
       "  'children': []},\n",
       " 'db6760c02d714fb3': {'spanID': 'db6760c02d714fb3',\n",
       "  'operation': 'GetProfiles start',\n",
       "  'service': 'unknown_service:profile_service_process',\n",
       "  'startTime': 1720953257007554,\n",
       "  'endTime': 1720953257009407,\n",
       "  'duration': 1853,\n",
       "  'error': False,\n",
       "  'children': []},\n",
       " '1bba50f600b7cc3f': {'spanID': '1bba50f600b7cc3f',\n",
       "  'operation': 'Nearby start',\n",
       "  'service': 'unknown_service:search_service_process',\n",
       "  'startTime': 1720953256994588,\n",
       "  'endTime': 1720953256996810,\n",
       "  'duration': 2222,\n",
       "  'error': False,\n",
       "  'children': []},\n",
       " 'ab2ce641ef5678e3': {'spanID': 'ab2ce641ef5678e3',\n",
       "  'operation': 'Nearby start',\n",
       "  'service': 'unknown_service:search_service_process',\n",
       "  'startTime': 1720953256994549,\n",
       "  'endTime': 1720953257001661,\n",
       "  'duration': 7112,\n",
       "  'error': False,\n",
       "  'children': []},\n",
       " '9c9959424051562f': {'spanID': '9c9959424051562f',\n",
       "  'operation': 'GetRates start',\n",
       "  'service': 'unknown_service:search_service_process',\n",
       "  'startTime': 1720953256996838,\n",
       "  'endTime': 1720953257001645,\n",
       "  'duration': 4807,\n",
       "  'error': False,\n",
       "  'children': []},\n",
       " '00fd6c775887fa58': {'spanID': '00fd6c775887fa58',\n",
       "  'operation': 'CheckAvailability start',\n",
       "  'service': 'unknown_service:reserv_service_process',\n",
       "  'startTime': 1720953257003508,\n",
       "  'endTime': 1720953257005883,\n",
       "  'duration': 2375,\n",
       "  'error': False,\n",
       "  'children': []},\n",
       " '1a722d7278baa053': {'spanID': '1a722d7278baa053',\n",
       "  'operation': 'SearchHandler start',\n",
       "  'service': 'unknown_service:wlgen_proc',\n",
       "  'startTime': 1720953256991598,\n",
       "  'endTime': 1720953257011317,\n",
       "  'duration': 19719,\n",
       "  'error': False,\n",
       "  'children': []},\n",
       " '551101ffeebe4120': {'spanID': '551101ffeebe4120',\n",
       "  'operation': 'Nearby start',\n",
       "  'service': 'unknown_service:geo_service_process',\n",
       "  'startTime': 1720953256995789,\n",
       "  'endTime': 1720953256995867,\n",
       "  'duration': 78,\n",
       "  'error': False,\n",
       "  'children': []},\n",
       " '43f968fd5735c742': {'spanID': '43f968fd5735c742',\n",
       "  'operation': 'SearchHandler start',\n",
       "  'service': 'unknown_service:frontend_service_process',\n",
       "  'startTime': 1720953256993244,\n",
       "  'endTime': 1720953257010078,\n",
       "  'duration': 16834,\n",
       "  'error': False,\n",
       "  'children': []},\n",
       " '62881199157a1a95': {'spanID': '62881199157a1a95',\n",
       "  'operation': 'GetProfiles start',\n",
       "  'service': 'unknown_service:frontend_service_process',\n",
       "  'startTime': 1720953257006476,\n",
       "  'endTime': 1720953257010064,\n",
       "  'duration': 3588,\n",
       "  'error': False,\n",
       "  'children': []},\n",
       " 'c190bc830cf70b53': {'spanID': 'c190bc830cf70b53',\n",
       "  'operation': 'CheckAvailability start',\n",
       "  'service': 'unknown_service:frontend_service_process',\n",
       "  'startTime': 1720953257002379,\n",
       "  'endTime': 1720953257006434,\n",
       "  'duration': 4055,\n",
       "  'error': False,\n",
       "  'children': []},\n",
       " 'e80924daae497f65': {'spanID': 'e80924daae497f65',\n",
       "  'operation': 'Nearby start',\n",
       "  'service': 'unknown_service:frontend_service_process',\n",
       "  'startTime': 1720953256993260,\n",
       "  'endTime': 1720953257002350,\n",
       "  'duration': 9090,\n",
       "  'error': False,\n",
       "  'children': []}}"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trace = jsons['data'][0]\n",
    "spans = {span[\"spanID\"]: create_span_dict(span) for span in trace[\"spans\"]}\n",
    "spans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import os\n",
    "import ijson\n",
    "from typing import Dict, List, Any\n",
    "\n",
    "def generate_trace_json(trace: Dict[str, Any]) -> Dict[str, Any]:\n",
    "    \"\"\"\n",
    "    Generate a JSON representation of a single trace.\n",
    "    \n",
    "    :param trace: A dictionary containing trace data\n",
    "    :return: A dictionary representing the trace in the desired JSON format\n",
    "    \"\"\"\n",
    "    def create_span_dict(span: Dict[str, Any]) -> Dict[str, Any]:\n",
    "        return {\n",
    "            \"spanID\": span[\"spanID\"],\n",
    "            \"operation\": span[\"operationName\"],\n",
    "            \"service\": trace[\"processes\"][span[\"processID\"]][\"serviceName\"],\n",
    "            \"startTime\": span[\"startTime\"],\n",
    "            \"endTime\": span[\"startTime\"] + span[\"duration\"],\n",
    "            \"duration\": span[\"duration\"],\n",
    "            \"error\": any(tag[\"key\"] == \"error\" and tag[\"value\"] for tag in span[\"tags\"]),\n",
    "            \"children\": []\n",
    "        }\n",
    "\n",
    "    # Create a dictionary of all spans\n",
    "    spans = {span[\"spanID\"]: create_span_dict(span) for span in trace[\"spans\"]}\n",
    "\n",
    "    # Build the span tree\n",
    "    for span in trace[\"spans\"]:\n",
    "        if \"references\" in span:\n",
    "            for ref in span[\"references\"]:\n",
    "                if ref[\"refType\"] == \"CHILD_OF\":\n",
    "                    parent_span = spans[ref[\"spanID\"]]\n",
    "                    parent_span[\"children\"].append(spans[span[\"spanID\"]])\n",
    "\n",
    "    # Find the root span (the one without a parent)\n",
    "    root_span = next(span for span in spans.values() if not any(span[\"spanID\"] in s[\"children\"] for s in spans.values()))\n",
    "\n",
    "    return {\n",
    "        \"traceID\": trace[\"traceID\"],\n",
    "        \"rootSpan\": root_span\n",
    "    }\n",
    "\n",
    "def process_all_traces(input_file: str, output_dir: str):\n",
    "    \"\"\"\n",
    "    Process all traces from the input file and generate individual JSON files.\n",
    "    \n",
    "    :param input_file: Path to the input file containing all traces\n",
    "    :param output_dir: Directory to store individual trace JSON files\n",
    "    \"\"\"\n",
    "    os.makedirs(output_dir, exist_ok=True)\n",
    "    \n",
    "    with open(input_file, 'rb') as f:\n",
    "        traces = ijson.items(f, 'data.item')\n",
    "        \n",
    "        for i, trace in enumerate(traces):\n",
    "            trace_json = generate_trace_json(trace)\n",
    "            output_file = os.path.join(output_dir, f\"{trace['traceID']}.json\")\n",
    "            \n",
    "            with open(output_file, 'w') as out_f:\n",
    "                json.dump(trace_json, out_f, indent=2)\n",
    "            \n",
    "            if (i + 1) % 100 == 0:\n",
    "                print(f\"\\rProcessed {i + 1} traces\", end=\"\", flush=True)\n",
    "\n",
    "    print(f\"\\nCompleted processing all traces. Output files are in {output_dir}\")\n",
    "\n",
    "# Usage example\n",
    "input_file = file_path\n",
    "output_dir = \"./output\"\n",
    "process_all_traces(input_file, output_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'spanID': '43f968fd5735c742',\n",
       " 'operation': 'SearchHandler start',\n",
       " 'service': 'unknown_service:frontend_service_process',\n",
       " 'startTime': 1720953256993244,\n",
       " 'endTime': 1720953257010078,\n",
       " 'duration': 16834,\n",
       " 'error': False,\n",
       " 'children': [{'spanID': '62881199157a1a95',\n",
       "   'operation': 'GetProfiles start',\n",
       "   'service': 'unknown_service:frontend_service_process',\n",
       "   'startTime': 1720953257006476,\n",
       "   'endTime': 1720953257010064,\n",
       "   'duration': 3588,\n",
       "   'error': False,\n",
       "   'children': [{'spanID': 'db6760c02d714fb3',\n",
       "     'operation': 'GetProfiles start',\n",
       "     'service': 'unknown_service:profile_service_process',\n",
       "     'startTime': 1720953257007554,\n",
       "     'endTime': 1720953257009407,\n",
       "     'duration': 1853,\n",
       "     'error': False,\n",
       "     'children': []}]},\n",
       "  {'spanID': 'c190bc830cf70b53',\n",
       "   'operation': 'CheckAvailability start',\n",
       "   'service': 'unknown_service:frontend_service_process',\n",
       "   'startTime': 1720953257002379,\n",
       "   'endTime': 1720953257006434,\n",
       "   'duration': 4055,\n",
       "   'error': False,\n",
       "   'children': [{'spanID': '00fd6c775887fa58',\n",
       "     'operation': 'CheckAvailability start',\n",
       "     'service': 'unknown_service:reserv_service_process',\n",
       "     'startTime': 1720953257003508,\n",
       "     'endTime': 1720953257005883,\n",
       "     'duration': 2375,\n",
       "     'error': False,\n",
       "     'children': []}]},\n",
       "  {'spanID': 'e80924daae497f65',\n",
       "   'operation': 'Nearby start',\n",
       "   'service': 'unknown_service:frontend_service_process',\n",
       "   'startTime': 1720953256993260,\n",
       "   'endTime': 1720953257002350,\n",
       "   'duration': 9090,\n",
       "   'error': False,\n",
       "   'children': [{'spanID': 'ab2ce641ef5678e3',\n",
       "     'operation': 'Nearby start',\n",
       "     'service': 'unknown_service:search_service_process',\n",
       "     'startTime': 1720953256994549,\n",
       "     'endTime': 1720953257001661,\n",
       "     'duration': 7112,\n",
       "     'error': False,\n",
       "     'children': [{'spanID': '1bba50f600b7cc3f',\n",
       "       'operation': 'Nearby start',\n",
       "       'service': 'unknown_service:search_service_process',\n",
       "       'startTime': 1720953256994588,\n",
       "       'endTime': 1720953256996810,\n",
       "       'duration': 2222,\n",
       "       'error': False,\n",
       "       'children': [{'spanID': '551101ffeebe4120',\n",
       "         'operation': 'Nearby start',\n",
       "         'service': 'unknown_service:geo_service_process',\n",
       "         'startTime': 1720953256995789,\n",
       "         'endTime': 1720953256995867,\n",
       "         'duration': 78,\n",
       "         'error': False,\n",
       "         'children': []}]},\n",
       "      {'spanID': '9c9959424051562f',\n",
       "       'operation': 'GetRates start',\n",
       "       'service': 'unknown_service:search_service_process',\n",
       "       'startTime': 1720953256996838,\n",
       "       'endTime': 1720953257001645,\n",
       "       'duration': 4807,\n",
       "       'error': False,\n",
       "       'children': [{'spanID': '02db9805175490e9',\n",
       "         'operation': 'GetRates start',\n",
       "         'service': 'unknown_service:rate_service_process',\n",
       "         'startTime': 1720953256998024,\n",
       "         'endTime': 1720953257000796,\n",
       "         'duration': 2772,\n",
       "         'error': False,\n",
       "         'children': []}]}]}]}]}"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for span in trace[\"spans\"]:\n",
    "        if \"references\" in span:\n",
    "            for ref in span[\"references\"]:\n",
    "                if ref[\"refType\"] == \"CHILD_OF\":\n",
    "                    parent_span = spans[ref[\"spanID\"]]\n",
    "                    parent_span[\"children\"].append(spans[span[\"spanID\"]])\n",
    "parent_span"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'spanID': '02db9805175490e9',\n",
       " 'operation': 'GetRates start',\n",
       " 'service': 'unknown_service:rate_service_process',\n",
       " 'startTime': 1720953256998024,\n",
       " 'endTime': 1720953257000796,\n",
       " 'duration': 2772,\n",
       " 'error': False,\n",
       " 'children': []}"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "root_span = next(span for span in spans.values() if not any(span[\"spanID\"] in s[\"children\"] for s in spans.values()))\n",
    "root_span"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_span_dict(span: Dict[str, Any]) -> Dict[str, Any]:\n",
    "        return {\n",
    "            \"spanID\": span[\"spanID\"],\n",
    "            \"operation\": span[\"operationName\"],\n",
    "            \"service\": trace[\"processes\"][span[\"processID\"]][\"serviceName\"],\n",
    "            \"startTime\": span[\"startTime\"],\n",
    "            \"endTime\": span[\"startTime\"] + span[\"duration\"],\n",
    "            \"duration\": span[\"duration\"],\n",
    "            \"error\": any(tag[\"key\"] == \"error\" and tag[\"value\"] for tag in span[\"tags\"]),\n",
    "            \"children\": []\n",
    "        }"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
